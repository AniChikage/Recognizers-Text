---
#JapaneseNumberParserConfiguration
LangMarker: 'Jpn'
DecimalSeparatorChar: !char '.'
FractionMarkerToken: ''
NonDecimalSeparatorChar: !char ' '
HalfADozenText: ''
WordSeparatorToken: ''
RoundNumberMap: !dictionary
  types: [string, long]
  entries:
    k: 1000
    m: 1000000
    g: 1000000000
    t: 1000000000000
RoundNumberMapJpn: !dictionary
  types: [char, long]
  entries:
    十: 10
    百: 100
    千: 1000
    万: 10000
    億: 100000000
    兆: 1000000000000
ZeroToNineMapJpn: !dictionary
  types: [char, double]
  entries:
    零: 0
    一: 1
    二: 2
    三: 3
    四: 4
    五: 5
    六: 6
    七: 7
    八: 8
    九: 9
    0: 0
    1: 1
    2: 2
    3: 3
    4: 4
    5: 5
    6: 6
    7: 7
    8: 8
    9: 9
    半: 0.5
FullToHalfMapJpn: !dictionary
  types: [char, char]
  entries:
    ０: '0'
    １: '1'
    ２: '2'
    ３: '3'
    ４: '4'
    ５: '5'
    ６: '6'
    ７: '7'
    ８: '8'
    ９: '9'
    Ｇ: G
    Ｍ: M
    Ｔ: T
    Ｋ: K
    ｋ: k
UnitMapJpn: !dictionary
  types: [string, string]
  entries:
    万万: 億
    億万: 兆
    万億: 兆
    万万: 億
RoundDirectListJpn: !list
  types: [char]
  entries:
    - 万
    - 億
    - 兆
ZeroToNineIntegerRegexJpn: !simpleRegex
  def: '[一二三四五六七八九]'
ZeroToNineJpnFullHalfRegexJpn: !simpleRegex
  def: '[\d１２３４５６７８９０]'
ZeroToNineJpnFullRegexJpn: !simpleRegex
  def: '[\d1234567890]'
DigitNumRegex: !nestedRegex
  def: '{ZeroToNineJpnFullHalfRegexJpn}+'
  references: [ZeroToNineJpnFullHalfRegexJpn]
RoundNumberIntegerRegexJpn: !simpleRegex
  def: '[十百千万億兆]'
AllIntRegexJpn: !nestedRegex
  def: (({ZeroToNineIntegerRegexJpn}|{ZeroToNineJpnFullHalfRegexJpn}|[十])\s*{RoundNumberIntegerRegexJpn}){1,2}\s*(\s*[以上]?)
  references: [ZeroToNineIntegerRegexJpn, ZeroToNineJpnFullHalfRegexJpn, RoundNumberIntegerRegexJpn]
OrdinalRegexJpn: !nestedRegex
  def: (だい|第){AllIntRegexJpn}
  references: [AllIntRegexJpn]
OrdinalNumbersRegex: !nestedRegex
  def: (だい|第){ZeroToNineJpnFullHalfRegexJpn}+
  references: [ZeroToNineJpnFullHalfRegexJpn]
NegativeNumberTermsRegexJpn: !simpleRegex
  def: '(マイナス)'
NegativeNumberTermsRegexNum: !simpleRegex
  def: (?<![-－])[-－]
NegativeNumberSignRegex: !nestedRegex
  def: ^{NegativeNumberTermsRegexJpn}.*|^{NegativeNumberTermsRegexNum}.*
  references: [NegativeNumberTermsRegexJpn, NegativeNumberTermsRegexNum]
PointRegexJpnStr: !simpleRegex
  def: '[\.．]'
#DoubleExtractor
PointRegexJpn: !nestedRegex
  def: '{PointRegexJpnStr}'
  references: [PointRegexJpnStr]
AllFloatRegexJpn: !nestedRegex
  def: '{NegativeNumberTermsRegexJpn}?{AllIntRegexJpn}\s*{PointRegexJpnStr}\s*[一二三四五六七八九](\s*{ZeroToNineIntegerRegexJpn})*'
  references: [NegativeNumberTermsRegexJpn, AllIntRegexJpn, PointRegexJpnStr, ZeroToNineIntegerRegexJpn]
SimplePercentageRegex: !nestedRegex
  def: '({ZeroToNineIntegerRegexJpn}|{AllFloatRegexJpn}|{AllIntRegexJpn})\s*パ\s*ー\s*セ\s*ン\s*ト'
  references: [ZeroToNineIntegerRegexJpn, AllFloatRegexJpn, AllIntRegexJpn]
PercentageRegex: !simpleRegex
  def: .+(?=パ\s*ー\s*セ\s*ン\s*ト)|.*(?=[％%])
NumbersPercentagePointRegex: !nestedRegex
  def: '({ZeroToNineJpnFullHalfRegexJpn}|{ZeroToNineJpnFullRegexJpn})+([\.．]({ZeroToNineJpnFullHalfRegexJpn}|{ZeroToNineJpnFullRegexJpn})+)?\s*パ\s*ー\s*セ\s*ン\s*ト'
  references: [ZeroToNineJpnFullRegexJpn, ZeroToNineJpnFullHalfRegexJpn]
#FractionExtractor
AllFractionNumber: !nestedRegex
  def: '{NegativeNumberTermsRegexJpn}?(({ZeroToNineJpnFullHalfRegexJpn}+|{NegativeNumberTermsRegexJpn}?({ZeroToNineJpnFullHalfRegexJpn}+|{AllIntRegexJpn})\s*分\s*の\s*{NegativeNumberTermsRegexJpn}?({ZeroToNineJpnFullHalfRegexJpn}+|{AllIntRegexJpn})'
  references: [NegativeNumberTermsRegexJpn, ZeroToNineJpnFullHalfRegexJpn, AllIntRegexJpn]
FractionNotationSpecialsCharsRegex: !nestedRegex
  def: ({NegativeNumberTermsRegexNum}\s*)?{ZeroToNineJpnFullHalfRegexJpn}+\s+{ZeroToNineJpnFullHalfRegexJpn}+[/／]{ZeroToNineJpnFullHalfRegexJpn}+
  references: [NegativeNumberTermsRegexNum, ZeroToNineJpnFullHalfRegexJpn]
FractionNotationRegex: !nestedRegex
  def: ({NegativeNumberTermsRegexNum}\s*)?{ZeroToNineJpnFullHalfRegexJpn}+[/／]{ZeroToNineJpnFullHalfRegexJpn}+
  references: [NegativeNumberTermsRegexNum, ZeroToNineJpnFullHalfRegexJpn]
NumbersSpecialsChars: !nestedRegex
  def: (({NegativeNumberTermsRegexNum}|{NegativeNumberTermsRegexJpn})\s*)?{ZeroToNineJpnFullHalfRegexJpn}+
  references: [NegativeNumberTermsRegexNum, ZeroToNineJpnFullHalfRegexJpn, NegativeNumberTermsRegexJpn ]
NumbersSpecialsCharsWithSuffix: !nestedRegex
  def: '{NegativeNumberTermsRegexNum}?{ZeroToNineJpnFullHalfRegexJpn}+\s*(K|k|M|G|T|Ｍ|Ｋ|ｋ|Ｇ|Ｔ)'
  references: [NegativeNumberTermsRegexNum, ZeroToNineJpnFullHalfRegexJpn]
DottedNumbersSpecialsChar: !nestedRegex
  def: '{NegativeNumberTermsRegexNum}?{ZeroToNineJpnFullHalfRegexJpn}{1,3}([,，]{ZeroToNineJpnFullHalfRegexJpn}{3})+'
  references: [NegativeNumberTermsRegexNum, ZeroToNineJpnFullHalfRegexJpn]
NumbersWithHalfDozen: !nestedRegex
  def: 半ダース
  references: []
NumbersWithDozen: !nestedRegex
  def: '({ZeroToNineJpnFullRegexJpn}|{ZeroToNineJpnFullHalfRegexJpn}|{ZeroToNineIntegerRegexJpn})ダース'
  references: [ZeroToNineJpnFullRegexJpn, ZeroToNineJpnFullHalfRegexJpn, ZeroToNineIntegerRegexJpn]
DoubleSpecialsChars: !nestedRegex
  def: (?<!({ZeroToNineJpnFullHalfRegexJpn}+[\.．]{ZeroToNineJpnFullHalfRegexJpn}*))({NegativeNumberTermsRegexNum}\s*)?{ZeroToNineJpnFullHalfRegexJpn}+[\.．]{ZeroToNineJpnFullHalfRegexJpn}+(?!{ZeroToNineJpnFullHalfRegexJpn}*[\.．]{ZeroToNineJpnFullHalfRegexJpn}+)
  references: [ZeroToNineJpnFullHalfRegexJpn, NegativeNumberTermsRegexNum]
DoubleSpecialsCharsWithNegatives: !nestedRegex
  def: (?<!({ZeroToNineJpnFullHalfRegexJpn}+|\.\.|．．))({NegativeNumberTermsRegexNum}\s*)?[\.．]{ZeroToNineJpnFullHalfRegexJpn}+(?!{ZeroToNineJpnFullHalfRegexJpn}*([\.．]{ZeroToNineJpnFullHalfRegexJpn}+))
  references: [ZeroToNineJpnFullHalfRegexJpn, NegativeNumberTermsRegexNum]
SimpleDoubleSpecialsChars: !nestedRegex
  def: ({NegativeNumberTermsRegexNum}\s*)?{ZeroToNineJpnFullHalfRegexJpn}{1,3}([,，]{ZeroToNineJpnFullHalfRegexJpn}{3})+[\.．]{ZeroToNineJpnFullHalfRegexJpn}+
  references: [NegativeNumberTermsRegexNum, ZeroToNineJpnFullHalfRegexJpn]
...